name: CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_BACKEND: ${{ secrets.DOCKERHUB_USERNAME }}/pmt-backend
  IMAGE_FRONTEND: ${{ secrets.DOCKERHUB_USERNAME }}/pmt-frontend

jobs:
  backend-test:
    name: Backend • build & tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: pmt
          POSTGRES_USER: pmt
          POSTGRES_PASSWORD: pmt
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U pmt -d pmt"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    defaults:
      run:
        working-directory: backend
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/pmt
      SPRING_DATASOURCE_USERNAME: pmt
      SPRING_DATASOURCE_PASSWORD: pmt
      APP_MAIL_FROM: no-reply@pmt.local
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: ${{ secrets.SMTP_USERNAME }}
      SPRING_MAIL_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      SPRING_MAIL_SMTP_AUTH: true
      SPRING_MAIL_STARTTLS: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
      - name: Maven test
        run: mvn -B -DskipITs=false test
      - name: Package (jar)
        run: mvn -B -DskipTests package
      - uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar


  frontend-test:
    name: Frontend • build & tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Unit tests (headless)
        run: npx ng test --watch=false --code-coverage --browsers=ChromeHeadless

      - name: Build (prod)
        run: npx ng build --configuration=production

      - name: Upload dist (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  build-and-push:
    name: Docker build & push (Docker Hub)
    runs-on: ubuntu-latest
    needs: [ backend-test, frontend-test ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_BACKEND }}:latest
            ${{ env.IMAGE_BACKEND }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_FRONTEND }}:latest
            ${{ env.IMAGE_FRONTEND }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
